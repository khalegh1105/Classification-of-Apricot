import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import numpy as np

# Image data generator for augmenting training data
datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest',
    validation_split=0.2
)

# Loading training and validation data
train_data = datagen.flow_from_directory(
    'path_to_your_dataset',
    target_size=(800, 800),
    batch_size=32,
    class_mode='categorical',
    subset='training'
)

val_data = datagen.flow_from_directory(
    'path_to_your_dataset',
    target_size=(800, 800),
    batch_size=32,
    class_mode='categorical',
    subset='validation'
)

# Building the CNN model
model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(800, 800, 3)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(128, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(128, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    layers.Dense(512, activation='relu'),
    layers.Dense(3, activation='softmax')  # Assuming 3 classes: unripe, ripe, overripe
])

# Compiling the model
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# Training the model
history = model.fit(
    train_data,
    steps_per_epoch=train_data.samples // 32,
    validation_data=val_data,
    validation_steps=val_data.samples // 32,
    epochs=20  # Adjust based on your dataset
)

# Save the model
model.save('apricot_ripeness_model.h5')

# Function to predict the ripeness level of an image
def predict_image(img_path):
    img = tf.keras.utils.load_img(img_path, target_size=(800, 800))
    img_array = tf.keras.utils.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    predictions = model.predict(img_array)
    return np.argmax(predictions[0])

# Example usage
result = predict_image('path_to_new_image.jpg')
ripeness_labels = ['unripe', 'ripe', 'overripe']
print(f'The predicted ripeness level is: {ripeness_labels[result]}')
